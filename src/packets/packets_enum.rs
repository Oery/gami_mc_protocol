// #################################################
// ###### THIS FILE IS AUTOMATICALLY GENERATED #####
// ########      DO NOT EDIT BY HAND     ###########
// #################################################

use crate::packets::*;
use crate::registry::tcp::{Origin::*, State::*};

#[derive(Debug)]
pub enum Packets {
    SetProtocol(handshake::client::SetProtocol),
    LegacyServerListPing(handshake::client::LegacyServerListPing),
    LoginStart(login::client::LoginStart),
    EncryptionResponse(login::client::EncryptionResponse),
    Disconnect(login::server::Disconnect),
    LoginSuccess(login::server::LoginSuccess),
    SetCompression(login::server::SetCompression),
    ClientKeepAlive(play::client::KeepAlive),
    ClientChat(play::client::Chat),
    UseEntity(play::client::UseEntity),
    Flying(play::client::Flying),
    ClientPosition(play::client::Position),
    Look(play::client::Look),
    PositionAndLook(play::client::PositionAndLook),
    ClientHeldItemSlot(play::client::HeldItemSlot),
    ArmAnimation(play::client::ArmAnimation),
    CloseWindow(play::client::CloseWindow),
    Transaction(play::client::Transaction),
    ClientSettings(play::client::ClientSettings),
    ClientCommand(play::client::ClientCommand),
    ServerKeepAlive(play::server::KeepAlive),
    JoinGame(play::server::JoinGame),
    ServerChat(play::server::Chat),
    UpdateTime(play::server::UpdateTime),
    EntityEquipment(play::server::EntityEquipment),
    SpawnPosition(play::server::SpawnPosition),
    UpdateHealth(play::server::UpdateHealth),
    Respawn(play::server::Respawn),
    ServerPosition(play::server::Position),
    ServerHeldItemSlot(play::server::HeldItemSlot),
    Bed(play::server::Bed),
    Animation(play::server::Animation),
    SpawnPlayer(play::server::SpawnPlayer),
    Collect(play::server::Collect),
    SpawnObject(play::server::SpawnObject),
    SpawnMob(play::server::SpawnMob),
    SpawnEntityPainting(play::server::SpawnEntityPainting),
    SpawnEntityExperienceOrb(play::server::SpawnEntityExperienceOrb),
    EntityVelocity(play::server::EntityVelocity),
    EntityDestroy(play::server::EntityDestroy),
    Entity(play::server::Entity),
    EntityRelativeMove(play::server::EntityRelativeMove),
    EntityLook(play::server::EntityLook),
    EntityMoveLook(play::server::EntityMoveLook),
    EntityTeleport(play::server::EntityTeleport),
    EntityHeadRotation(play::server::EntityHeadRotation),
    EntityStatus(play::server::EntityStatus),
    AttachEntity(play::server::AttachEntity),
    EntityMetadata(play::server::EntityMetadata),
    EntityEffect(play::server::EntityEffect),
    RemoveEntityEffect(play::server::RemoveEntityEffect),
    BlockChange(play::server::BlockChange),
    SetSlot(play::server::SetSlot),
    PlayerInfo(play::server::PlayerInfo),
    ScoreboardObjective(play::server::ScoreboardObjective),
    ScoreboardUpdate(play::server::ScoreboardUpdate),
    ScoreboardDisplay(play::server::ScoreboardDisplay),
    Teams(play::server::Teams),
    KickDisconnect(play::server::KickDisconnect),
    ServerDifficulty(play::server::ServerDifficulty),
    PingStart(status::client::PingStart),
    ClientPing(status::client::Ping),
    ServerInfo(status::server::ServerInfo),
    ServerPing(status::server::Ping),
}

impl Packets {
    pub fn deserialize(id: i32, state: &States, origin: &Origins, bytes: &[u8]) -> Result<Packets> {
        match (state, origin, id) {
            (Handshake, Client, 0i32) => Ok(Packets::SetProtocol(Packet::deserialize(bytes)?)),
            (Handshake, Client, 254i32) => {
                Ok(Packets::LegacyServerListPing(Packet::deserialize(bytes)?))
            }
            (Login, Client, 0i32) => Ok(Packets::LoginStart(Packet::deserialize(bytes)?)),
            (Login, Client, 1i32) => Ok(Packets::EncryptionResponse(Packet::deserialize(bytes)?)),
            (Login, Server, 0i32) => Ok(Packets::Disconnect(Packet::deserialize(bytes)?)),
            (Login, Server, 2i32) => Ok(Packets::LoginSuccess(Packet::deserialize(bytes)?)),
            (Login, Server, 3i32) => Ok(Packets::SetCompression(Packet::deserialize(bytes)?)),
            (Play, Client, 0i32) => Ok(Packets::ClientKeepAlive(Packet::deserialize(bytes)?)),
            (Play, Client, 1i32) => Ok(Packets::ClientChat(Packet::deserialize(bytes)?)),
            (Play, Client, 2i32) => Ok(Packets::UseEntity(Packet::deserialize(bytes)?)),
            (Play, Client, 3i32) => Ok(Packets::Flying(Packet::deserialize(bytes)?)),
            (Play, Client, 4i32) => Ok(Packets::ClientPosition(Packet::deserialize(bytes)?)),
            (Play, Client, 5i32) => Ok(Packets::Look(Packet::deserialize(bytes)?)),
            (Play, Client, 6i32) => Ok(Packets::PositionAndLook(Packet::deserialize(bytes)?)),
            (Play, Client, 9i32) => Ok(Packets::ClientHeldItemSlot(Packet::deserialize(bytes)?)),
            (Play, Client, 10i32) => Ok(Packets::ArmAnimation(Packet::deserialize(bytes)?)),
            (Play, Client, 13i32) => Ok(Packets::CloseWindow(Packet::deserialize(bytes)?)),
            (Play, Client, 15i32) => Ok(Packets::Transaction(Packet::deserialize(bytes)?)),
            (Play, Client, 21i32) => Ok(Packets::ClientSettings(Packet::deserialize(bytes)?)),
            (Play, Client, 22i32) => Ok(Packets::ClientCommand(Packet::deserialize(bytes)?)),
            (Play, Server, 0i32) => Ok(Packets::ServerKeepAlive(Packet::deserialize(bytes)?)),
            (Play, Server, 1i32) => Ok(Packets::JoinGame(Packet::deserialize(bytes)?)),
            (Play, Server, 2i32) => Ok(Packets::ServerChat(Packet::deserialize(bytes)?)),
            (Play, Server, 3i32) => Ok(Packets::UpdateTime(Packet::deserialize(bytes)?)),
            (Play, Server, 4i32) => Ok(Packets::EntityEquipment(Packet::deserialize(bytes)?)),
            (Play, Server, 5i32) => Ok(Packets::SpawnPosition(Packet::deserialize(bytes)?)),
            (Play, Server, 6i32) => Ok(Packets::UpdateHealth(Packet::deserialize(bytes)?)),
            (Play, Server, 7i32) => Ok(Packets::Respawn(Packet::deserialize(bytes)?)),
            (Play, Server, 8i32) => Ok(Packets::ServerPosition(Packet::deserialize(bytes)?)),
            (Play, Server, 9i32) => Ok(Packets::ServerHeldItemSlot(Packet::deserialize(bytes)?)),
            (Play, Server, 10i32) => Ok(Packets::Bed(Packet::deserialize(bytes)?)),
            (Play, Server, 11i32) => Ok(Packets::Animation(Packet::deserialize(bytes)?)),
            (Play, Server, 12i32) => Ok(Packets::SpawnPlayer(Packet::deserialize(bytes)?)),
            (Play, Server, 13i32) => Ok(Packets::Collect(Packet::deserialize(bytes)?)),
            (Play, Server, 14i32) => Ok(Packets::SpawnObject(Packet::deserialize(bytes)?)),
            (Play, Server, 15i32) => Ok(Packets::SpawnMob(Packet::deserialize(bytes)?)),
            (Play, Server, 16i32) => Ok(Packets::SpawnEntityPainting(Packet::deserialize(bytes)?)),
            (Play, Server, 17i32) => Ok(Packets::SpawnEntityExperienceOrb(Packet::deserialize(
                bytes,
            )?)),
            (Play, Server, 18i32) => Ok(Packets::EntityVelocity(Packet::deserialize(bytes)?)),
            (Play, Server, 19i32) => Ok(Packets::EntityDestroy(Packet::deserialize(bytes)?)),
            (Play, Server, 20i32) => Ok(Packets::Entity(Packet::deserialize(bytes)?)),
            (Play, Server, 21i32) => Ok(Packets::EntityRelativeMove(Packet::deserialize(bytes)?)),
            (Play, Server, 22i32) => Ok(Packets::EntityLook(Packet::deserialize(bytes)?)),
            (Play, Server, 23i32) => Ok(Packets::EntityMoveLook(Packet::deserialize(bytes)?)),
            (Play, Server, 24i32) => Ok(Packets::EntityTeleport(Packet::deserialize(bytes)?)),
            (Play, Server, 25i32) => Ok(Packets::EntityHeadRotation(Packet::deserialize(bytes)?)),
            (Play, Server, 26i32) => Ok(Packets::EntityStatus(Packet::deserialize(bytes)?)),
            (Play, Server, 27i32) => Ok(Packets::AttachEntity(Packet::deserialize(bytes)?)),
            (Play, Server, 28i32) => Ok(Packets::EntityMetadata(Packet::deserialize(bytes)?)),
            (Play, Server, 29i32) => Ok(Packets::EntityEffect(Packet::deserialize(bytes)?)),
            (Play, Server, 30i32) => Ok(Packets::RemoveEntityEffect(Packet::deserialize(bytes)?)),
            (Play, Server, 35i32) => Ok(Packets::BlockChange(Packet::deserialize(bytes)?)),
            (Play, Server, 47i32) => Ok(Packets::SetSlot(Packet::deserialize(bytes)?)),
            (Play, Server, 56i32) => Ok(Packets::PlayerInfo(Packet::deserialize(bytes)?)),
            (Play, Server, 59i32) => Ok(Packets::ScoreboardObjective(Packet::deserialize(bytes)?)),
            (Play, Server, 60i32) => Ok(Packets::ScoreboardUpdate(Packet::deserialize(bytes)?)),
            (Play, Server, 61i32) => Ok(Packets::ScoreboardDisplay(Packet::deserialize(bytes)?)),
            (Play, Server, 62i32) => Ok(Packets::Teams(Packet::deserialize(bytes)?)),
            (Play, Server, 64i32) => Ok(Packets::KickDisconnect(Packet::deserialize(bytes)?)),
            (Play, Server, 65i32) => Ok(Packets::ServerDifficulty(Packet::deserialize(bytes)?)),
            (Status, Client, 0i32) => Ok(Packets::PingStart(Packet::deserialize(bytes)?)),
            (Status, Client, 1i32) => Ok(Packets::ClientPing(Packet::deserialize(bytes)?)),
            (Status, Server, 0i32) => Ok(Packets::ServerInfo(Packet::deserialize(bytes)?)),
            (Status, Server, 1i32) => Ok(Packets::ServerPing(Packet::deserialize(bytes)?)),
            _ => Err(Error::new(ErrorKind::InvalidData, "Unknown packet")),
        }
    }
}
